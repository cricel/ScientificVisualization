// generated by Fast Light User Interface Designer (fluid) version 1.0305

#ifndef gui_h
#define gui_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "Application.h"
#include <stdlib.h>
#include <FL/Fl_Menu_Bar.H>
#include "EditorWindow.h"
#include "DisplayWindow.h"
#include <FL/Fl_Value_Slider.H>

class Gui {
public:
  Gui();
  Fl_Double_Window *MainWindow;
  Fl_Menu_Bar *menuBar;
  static Fl_Menu_Item menu_menuBar[];
  static Fl_Menu_Item *fileMenu;
  static Fl_Menu_Item *readFile;
private:
  inline void cb_readFile_i(Fl_Menu_*, void*);
  static void cb_readFile(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *writeFile;
private:
  inline void cb_writeFile_i(Fl_Menu_*, void*);
  static void cb_writeFile(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *imageProcess;
  static Fl_Menu_Item *updateGUI;
private:
  inline void cb_updateGUI_i(Fl_Menu_*, void*);
  static void cb_updateGUI(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *greyEffect;
private:
  inline void cb_greyEffect_i(Fl_Menu_*, void*);
  static void cb_greyEffect(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *averageSmooth;
private:
  inline void cb_averageSmooth_i(Fl_Menu_*, void*);
  static void cb_averageSmooth(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *medianSmooth;
private:
  inline void cb_medianSmooth_i(Fl_Menu_*, void*);
  static void cb_medianSmooth(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *gaussianSmooth;
private:
  inline void cb_gaussianSmooth_i(Fl_Menu_*, void*);
  static void cb_gaussianSmooth(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *edgeDetect;
private:
  inline void cb_edgeDetect_i(Fl_Menu_*, void*);
  static void cb_edgeDetect(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *undoButton;
private:
  inline void cb_undoButton_i(Fl_Menu_*, void*);
  static void cb_undoButton(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *volumeRendering;
  static Fl_Menu_Item *readVolumeFile;
private:
  inline void cb_readVolumeFile_i(Fl_Menu_*, void*);
  static void cb_readVolumeFile(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *xRay;
private:
  inline void cb_xRay_i(Fl_Menu_*, void*);
  static void cb_xRay(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *MIP;
private:
  inline void cb_MIP_i(Fl_Menu_*, void*);
  static void cb_MIP(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *restoreButton;
private:
  inline void cb_restoreButton_i(Fl_Menu_*, void*);
  static void cb_restoreButton(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *exitButton;
private:
  inline void cb_exitButton_i(Fl_Menu_*, void*);
  static void cb_exitButton(Fl_Menu_*, void*);
public:
  CEditorWindow *EditorWindow;
  CDisplayWindow *DisplayWindow;
  Fl_Value_Slider *sliderX;
private:
  inline void cb_sliderX_i(Fl_Value_Slider*, void*);
  static void cb_sliderX(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *sliderY;
private:
  inline void cb_sliderY_i(Fl_Value_Slider*, void*);
  static void cb_sliderY(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *sliderZ;
private:
  inline void cb_sliderZ_i(Fl_Value_Slider*, void*);
  static void cb_sliderZ(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *sliderWidth;
private:
  inline void cb_sliderWidth_i(Fl_Value_Slider*, void*);
  static void cb_sliderWidth(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *sliderHeight;
private:
  inline void cb_sliderHeight_i(Fl_Value_Slider*, void*);
  static void cb_sliderHeight(Fl_Value_Slider*, void*);
public:
  void show();
  Application *app; 
};
#endif
